import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext, simpledialog
import smtplib
import csv
import time
import os
import json
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.image import MIMEImage
from email.utils import formataddr
import requests
from io import BytesIO

TEMPLATES_FILE = "templates.json"

class MailApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è")
        self.guests = []
        self.image_data = None
        self.sent_count = 0
        self.error_count = 0

        # Gmail + –ø–∞—Ä–æ–ª—å
        tk.Label(root, text="Gmail:").grid(row=0, column=0, sticky="e")
        self.entry_email = tk.Entry(root, width=30)
        self.entry_email.grid(row=0, column=1, sticky="w")

        tk.Label(root, text="App password:").grid(row=1, column=0, sticky="e")
        self.entry_password = tk.Entry(root, show="*", width=30)
        self.entry_password.grid(row=1, column=1, sticky="w")

        # CSV
        tk.Button(root, text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV –≥–æ—Å—Ç–µ–π", command=self.load_csv).grid(row=0, column=2, padx=5)
        self.label_guests = tk.Label(root, text="–ì–æ—Å—Ç–µ–π: 0")
        self.label_guests.grid(row=1, column=2, padx=5)

        # –®–∞–±–ª–æ–Ω—ã
        tk.Label(root, text="–®–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞:").grid(row=2, column=0, sticky="e")
        self.template_var = tk.StringVar()
        self.combo_templates = tk.OptionMenu(root, self.template_var, "")
        self.combo_templates.grid(row=2, column=1, sticky="w")
        self.load_templates()
        self.template_var.trace("w", lambda *a: self.apply_template())

        # –¢–µ–º–∞ –ø–∏—Å—å–º–∞
        tk.Label(root, text="–¢–µ–º–∞ –ø–∏—Å—å–º–∞:").grid(row=3, column=0, sticky="e")
        self.entry_subject = tk.Entry(root, width=60)
        self.entry_subject.grid(row=3, column=1, columnspan=2, sticky="we")

        # HTML –ø–æ–ª–µ
        tk.Label(root, text="HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:").grid(row=4, column=0, sticky="nw")
        self.html_widget = scrolledtext.ScrolledText(root, width=100, height=20)
        self.html_widget.grid(row=5, column=0, columnspan=3, padx=5, pady=5)

        # –ö–Ω–æ–ø–∫–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫
        self.frame_buttons = tk.Frame(root)
        self.frame_buttons.grid(row=6, column=0, columnspan=3, sticky="w", pady=5)

        tk.Button(self.frame_buttons, text="üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É (—Ñ–∞–π–ª)", command=self.load_image_file).grid(row=0, column=0, padx=5)
        tk.Button(self.frame_buttons, text="üåê –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ URL", command=self.load_image_url).grid(row=0, column=1, padx=5)

        # –ù–∏–∂–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        self.frame_send = tk.Frame(root)
        self.frame_send.grid(row=7, column=0, columnspan=3, pady=10)

        tk.Button(self.frame_send, text="üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", bg="lightblue", command=self.preview_invite).grid(row=0, column=0, padx=5)
        tk.Button(self.frame_send, text="‚úâ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç", bg="orange", command=self.send_test_email).grid(row=0, column=1, padx=5)
        tk.Button(self.frame_send, text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", bg="lightgreen", command=self.send_all).grid(row=0, column=2, padx=5)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å
        self.frame_right = tk.Frame(root)
        self.frame_right.grid(row=0, column=3, rowspan=8, padx=10, sticky="ns")

        tk.Label(self.frame_right, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞").pack()

        tk.Label(self.frame_right, text="–ó–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫):").pack()
        self.delay_entry = tk.Entry(self.frame_right, width=5)
        self.delay_entry.insert(0, "3")
        self.delay_entry.pack()

        self.label_stats = tk.Label(self.frame_right, text="üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0 | ‚ö† –û—à–∏–±–æ–∫: 0")
        self.label_stats.pack(pady=5)

        tk.Label(self.frame_right, text="–õ–æ–≥:").pack()
        self.log = scrolledtext.ScrolledText(self.frame_right, width=40, height=20, bg="black", fg="lime")
        self.log.pack()

    def log_message(self, text, error=False):
        self.log.insert(tk.END, f"{text}\n", "error" if error else "success")
        self.log.tag_config("error", foreground="red")
        self.log.tag_config("success", foreground="lime")
        self.log.see(tk.END)

    def load_csv(self):
        file = filedialog.askopenfilename(filetypes=[("CSV —Ñ–∞–π–ª—ã", "*.csv")])
        if not file: return
        with open(file, newline='', encoding="utf-8") as f:
            reader = csv.DictReader(f)
            self.guests = [row for row in reader]
        self.label_guests.config(text=f"–ì–æ—Å—Ç–µ–π: {len(self.guests)}")
        self.log_message(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω CSV: {len(self.guests)} –≥–æ—Å—Ç–µ–π")

    def load_templates(self):
        if not os.path.exists(TEMPLATES_FILE):
            default_templates = {
                "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è": "<h2>–ü—Ä–∏–≤–µ—Ç, {name}!</h2><p>–ü—Ä–∏–≥–ª–∞—à–∞—é —Ç–µ–±—è –Ω–∞ –º–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è üéâ</p>",
                "–°–≤–∞–¥—å–±–∞": "<h2>–î–æ—Ä–æ–≥–æ–π {name},</h2><p>–ü—Ä–∏–≥–ª–∞—à–∞–µ–º —Ç–µ–±—è –Ω–∞ —Å–≤–∞–¥—å–±—É üíç</p>"
            }
            with open(TEMPLATES_FILE, "w", encoding="utf-8") as f:
                json.dump(default_templates, f, ensure_ascii=False, indent=2)

        with open(TEMPLATES_FILE, "r", encoding="utf-8") as f:
            templates = json.load(f)

        menu = self.combo_templates["menu"]
        menu.delete(0, "end")
        for name in templates.keys():
            menu.add_command(label=name, command=lambda v=name: self.template_var.set(v))
        self.templates = templates

    def apply_template(self):
        name = self.template_var.get()
        if name in self.templates:
            self.html_widget.delete("1.0", tk.END)
            self.html_widget.insert(tk.END, self.templates[name])
            self.entry_subject.delete(0, tk.END)
            self.entry_subject.insert(0, f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: {name}")

    def load_image_file(self):
        file = filedialog.askopenfilename(filetypes=[("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.png;*.jpg;*.jpeg;*.gif")])
        if file:
            with open(file, "rb") as f:
                self.image_data = f.read()
            self.log_message("üìé –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ (—Ñ–∞–π–ª)")

    def load_image_url(self):
        url = simpledialog.askstring("URL –∫–∞—Ä—Ç–∏–Ω–∫–∏", "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É:")
        if url:
            try:
                resp = requests.get(url)
                resp.raise_for_status()
                self.image_data = resp.content
                self.log_message("üåê –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ (URL)")
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}", error=True)

    def preview_invite(self):
        preview_win = tk.Toplevel(self.root)
        preview_win.title("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–∏—Å—å–º–∞")
        text = self.html_widget.get("1.0", tk.END)
        tk.Label(preview_win, text="–¢–µ–º–∞: " + self.entry_subject.get()).pack()
        sc = scrolledtext.ScrolledText(preview_win, width=100, height=20)
        sc.pack()
        sc.insert(tk.END, text)

    def send_email(self, to_email, to_name):
        try:
            msg = MIMEMultipart()
            msg["From"] = formataddr(("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", self.entry_email.get()))
            msg["To"] = to_email
            msg["Subject"] = self.entry_subject.get()

            html_content = self.html_widget.get("1.0", tk.END).replace("{name}", to_name)
            msg.attach(MIMEText(html_content, "html"))

            if self.image_data:
                image = MIMEImage(self.image_data)
                image.add_header("Content-ID", "<invitation>")
                msg.attach(image)

            with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
                server.login(self.entry_email.get(), self.entry_password.get())
                server.send_message(msg)

            self.sent_count += 1
            self.label_stats.config(text=f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.sent_count} | ‚ö† –û—à–∏–±–æ–∫: {self.error_count}")
            self.log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {to_email}")
        except Exception as e:
            self.error_count += 1
            self.label_stats.config(text=f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.sent_count} | ‚ö† –û—à–∏–±–æ–∫: {self.error_count}")
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ {to_email}: {e}", error=True)

    def send_test_email(self):
        email = simpledialog.askstring("–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ", "–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è —Ç–µ—Å—Ç–∞:")
        if email:
            self.send_email(email, "–¢–µ—Å—Ç")

    def send_all(self):
        delay = float(self.delay_entry.get() or 0)
        for guest in self.guests:
            name = guest.get("name", "–ì–æ—Å—Ç—å")
            email = guest.get("email")
            if email:
                self.log_message(f"‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞: {name} <{email}>")
                self.send_email(email, name)
                time.sleep(delay)
        self.log_message("üì® –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    root = tk.Tk()
    app = MailApp(root)
    root.mainloop()
